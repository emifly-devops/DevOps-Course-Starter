Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"

  config.vm.network "forwarded_port", guest: 5000, host: 5000

  config.vm.synced_folder "..", "/vagrant"

  config.vm.provision "shell", inline: <<-SHELL
    echo "=== INSTALL KEY DEPENDENCIES ==="

    apt-get update && apt-get upgrade
    apt-get install -y make \
                       build-essential \
                       libssl-dev \
                       zlib1g-dev \
                       libbz2-dev \
                       libreadline-dev \
                       libsqlite3-dev \
                       wget \
                       curl \
                       gnupg \
                       llvm \
                       libncursesw5-dev \
                       xz-utils \
                       tk-dev \
                       libxml2-dev \
                       libxmlsec1-dev \
                       libffi-dev \
                       liblzma-dev

    echo "=== INSTALL MONGODB ==="

    curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
      sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
      --dearmor

    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] \
      https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | \
      sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

    apt-get update
    apt-get install -y mongodb-org

    systemctl start mongod

    echo "=== INSTALL NODE AND NPM USING NVM ==="

    export NVM_DIR="/opt/nvm" && (
      git clone https://github.com/nvm-sh/nvm.git $NVM_DIR
      cd $NVM_DIR
      git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
    ) && source $NVM_DIR/nvm.sh

    nvm install 16.17.1

    ln -s $NVM_DIR/versions/node/v$(cat $NVM_DIR/alias/default)/bin/node /usr/local/bin/node
    ln -s $NVM_DIR/versions/node/v$(cat $NVM_DIR/alias/default)/bin/npm /usr/local/bin/npm

    echo "=== INSTALL PYTHON AND POETRY USING PYENV ==="

    export PYENV_ROOT="/opt/pyenv" && (
      git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
      ln -s $PYENV_ROOT/bin/pyenv /usr/local/bin/pyenv
      eval "$(pyenv init -)"
    )

    pyenv install 3.10.7
    pyenv global 3.10.7

    ln -s $PYENV_ROOT/shims/python /usr/local/bin/python

    export POETRY_HOME="/opt/poetry" && (
      curl -sSL https://install.python-poetry.org | python -
    )

    ln -s $POETRY_HOME/bin/poetry /usr/local/bin/poetry
  SHELL

  config.trigger.after :up do |trigger|
    trigger.name = "Launching App"
    trigger.info = "Running the todo app setup script"
    trigger.run_remote = {privileged: false, inline: "
      cd /vagrant

      export $(cat .env | grep -v '^#' | xargs)
      export $(cat .env.public | grep -v '^#' | xargs)

      npm install
      poetry install

      poetry run gunicorn --bind 0.0.0.0:5000 'todo_app.app:create_app()' \
        --access-logfile 'access.log' --error-logfile 'error.log' --daemon
    "}
  end
end

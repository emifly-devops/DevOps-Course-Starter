name: CI/CD pipeline
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'README.md'
jobs:
  build:
    name: Build project
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: dummy-dockerhub-username
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build project
        working-directory: docker
        run: docker compose build production
  pytest:
    name: Run Pytest tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Pytest tests
        working-directory: docker
        run: docker compose --file docker-compose.pytest.yml up pytest --build
  cypress:
    name: Run Cypress tests
    needs: build
    runs-on: ubuntu-latest
    env:
      OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
      CYPRESS_OAUTH_USERNAME: ${{ secrets.CYPRESS_OAUTH_USERNAME }}
      CYPRESS_OAUTH_PASSWORD: ${{ secrets.CYPRESS_OAUTH_PASSWORD }}
      CYPRESS_OAUTH_OTP_SECRET: ${{ secrets.CYPRESS_OAUTH_OTP_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Cypress tests
        working-directory: docker
        run: docker compose --file docker-compose.cypress.yml up cypress --build --abort-on-container-exit
  docker:
    name: Publish to Docker Hub
    needs:
      - pytest
      - cypress
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        working-directory: docker
        run: docker compose build production
      - name: Push Docker image
        working-directory: docker
        run: docker compose push production
  azure:
    name: Refresh Azure web app to pull from latest available Docker image
    needs: docker
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      TF_VAR_appservice_plan_name: ${{ secrets.TF_VAR_APPSERVICE_PLAN_NAME }}
      TF_VAR_cosmos_account_name: ${{ secrets.TF_VAR_COSMOS_ACCOUNT_NAME }}
      TF_VAR_dockerhub_username: ${{ secrets.TF_VAR_DOCKERHUB_USERNAME }}
      TF_VAR_oauth_client_id: ${{ secrets.TF_VAR_OAUTH_CLIENT_ID }}
      TF_VAR_oauth_client_secret: ${{ secrets.TF_VAR_OAUTH_CLIENT_SECRET }}
      TF_VAR_resource_group_name: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}
      TF_VAR_secret_key: ${{ secrets.TF_VAR_SECRET_KEY }}
      TF_VAR_webapp_name: ${{ secrets.TF_VAR_WEBAPP_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform init
        working-directory: terraform
        run: terraform init -backend-config=<(python -m generate_backend_config)
      - name: Terraform apply
        working-directory: terraform
        run: terraform apply -auto-approve
      - name: Make post request to web app CD webhook URL
        working-directory: terraform
        run: curl -dH -X POST "$(terraform output -raw webapp_cd_webhook_url)"
